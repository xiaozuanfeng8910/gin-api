// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gin-api/internal/config"
	"gin-api/internal/router"
	"gin-api/pkg/db"
	"gin-api/pkg/log"
	"gin-api/pkg/server"
	"gin-api/pkg/validation"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"net/http"
)

// Injectors from wire.go:

func InitializeMyApp() (*MyApp, error) {
	configConfig, err := config.InitializeConfig()
	if err != nil {
		return nil, err
	}
	logger, err := log.InitializerLog(configConfig)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.InitMySQLGorm(configConfig, logger)
	if err != nil {
		return nil, err
	}
	customValidator := validation.NewCustomValidator(logger)
	engine := router.InitRoutes(logger, gormDB, customValidator)
	httpServer, err := server.RunServer(engine, configConfig)
	if err != nil {
		return nil, err
	}
	MyApp := NewMyApp(httpServer, gormDB, logger)
	return MyApp, nil
}

// wire.go:

type MyApp struct {
	server *http.Server
	db     *gorm.DB
	logger *zap.Logger
}

// NewMyApp 是 MyApp 的构造函数，由 wire 调用
func NewMyApp(server2 *http.Server, db2 *gorm.DB, logger *zap.Logger) *MyApp {
	return &MyApp{
		server: server2,
		db:     db2,
		logger: logger,
	}
}

// Run 启动应用服务器
func (a *MyApp) Run() error {
	return a.server.ListenAndServe()
}

// Shutdown 优雅关闭服务器
func (a *MyApp) Shutdown() {
	if err := a.server.Close(); err != nil {
		a.logger.Error("服务器关闭失败", zap.Error(err))
	}
	if sqlDB, err := a.db.DB(); err == nil {
		sqlDB.Close()
	}
}
